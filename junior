import {  Component } from '@angular/core';
import { FormBuilder, FormGroup, Validators } from '@angular/forms';
import { ApiService } from 'src/app/services/api.service';
import { ConfirmationDialog } from '../confirmation-dialog/confirmation-dialog.component';
import { MatDialog } from '@angular/material/dialog';
import { MatDialogConfig } from '@angular/material/dialog';
import { Router } from '@angular/router';
import { NonNullAssert } from '@angular/compiler';
import { ActiveServicesService } from '../../active-services.service';


@Component({
  selector: 'app-planif-home',
  templateUrl: './planif-home.component.html',
  styleUrls: ['./planif-home.component.css']
})
export class PlanifHomeComponent {

  public missions: any;
  createForm!: FormGroup;
  submitted = false;
  planifWindow: Window | null = null;

  constructor(private service:ApiService, public dialog: MatDialog, private formBuilder:FormBuilder, private router: Router, private activeServicesService: ActiveServicesService) {
    this.activeServicesService.isPlanifActive = true;
  }


  ngOnInit(): void {
    this.getMissions();
    this.createForm = this.formBuilder.group({

      name: ['',[ Validators.maxLength(15), Validators.required]],
      
      description: ['', Validators.maxLength(140)],
      
      date: ['', Validators.required],

      status: ['down']
      
      });

    window.onunload = () => this.handleWindowClose();  
    

  }


  get f(){return this.createForm.controls;}

  getMissions = () => {
    return new Promise((resolve, reject) => {
      this.service.getAllMissions()
        .subscribe(response => {
          this.missions = response;
          resolve(this.missions)
        });
    });
  }

  delMission(id: any): void{

    this.service.deleteMission(id).subscribe(() => this.getMissions());
  }

  onAddMission(): void{
    /*Object.defineProperty(mission.value, 'status', {
      value: 'down'
    });*/
    //console.log(mission.value)
    this.submitted = true;

    console.log(this.createForm.value);
    this.service.postMission(this.createForm.value).subscribe(() => this.getMissions());
    this.createForm.reset();}
  
  openDialog(id:number, missionName: String) {
    const config = new MatDialogConfig();
    config.data = {
      message: 'Do you want to delete ' + missionName
    }
    config.panelClass ="/confirmation-dialog/confirmation-dialog.component.css"


    const dialogRef = this.dialog.open(ConfirmationDialog,config);
    dialogRef.afterClosed().subscribe((confirmed: boolean) => {
        if (confirmed) {
            this.delMission(id);
        }
    });
  } 

  handleWindowClose() {
    if (this.activeServicesService.isPlanifActive) {
      this.activeServicesService.isPlanifActive = false;
      // Inform home.component that this window is closed
      window.opener.postMessage('windowClosed', '*');
    }
  }
}

function Viewchild(arg0: string): (target: PlanifHomeComponent, propertyKey: "creaRef") => void {
  throw new Error('Function not implemented.');
}


